Sprint 1
    Version 1

        [x] Ajouter prompt pour taper message client1&2
        [x] Ajouter REUSE pour bind socket serveur
        [x] verification argc au lancement client1
        [x] verification argc au lancement client2
        [x] commenter le code serveur
        [x] commenter le code client 1
        [x] commenter le code client 2

    Version 2

        [x] envoie d'un message client vers tous les autres clients

    Options

        [x]Optimiser le protocole d’envoi de chaine de caractère : envoie d’abord de la taille (l’information de la taille du message est d’une taille fixe) puis envoi du contenu adapter à la taille du message (allocation dynamique et envoi et réception seulement des octets significatifs)
        [x]Gestion d’erreur (valeur de retour, ex : bind,rcv…) sur les différentes fonctions systèmes utilisées 
        [x]Gestion de la déconnexion propre des clients, => mise à jour des informations du tableau client
        [x]Gestion de la déconnexion forcée des clients ou du serveur, si l’un d’un crashe les autres s'arrêtent proprement (= détection de la fin de connexion sur les sockets)
            message au clients ctrl+c
        [x]Sécurisation du tableau en mémoire partagée (mutex)
        []Définition d’un protocole pour les commandes particulières envoyées en messages depuis le client, comme le fin précédemment, d’autres von ( exemple @... sur discord )
            []!membres
            []/shrug
            []/tableflip
            []/unflip

Sprint 2

    Version 1

    [x]Définir un protocole pour les commandes particulières envoyées en messages depuis le client( exemple @... sur discord ) (cf README)
    []Création d’une fonction/commande message privé, un client peut choisir d’envoyer à un autre client en particulier
        [x]ajout d’un pseudo lors de la connexion d’un client et utilisation du pseudo pour les échanges privé
        []Gestion d’erreur coté serveur sur l’existence du destinataire
        []Gestion pseudo déjà existant
    []Création d’une fonction/commande de déconnexion, une commande permet au client de se déconnecter, le serveur, enlève le client de la liste, clôt alors la connexion (shutdown ou close) puis finit le thread associé, cette commande n’agit pas sur les autres clients.
    []Ajout d’un sémaphore indiquant le nombre de place restante sur le serveur pour faciliter le remplacement de client et assurer un nombre de client maximum
    []Ajout d’une variable partagée pour une fermeture propre des threads lors de la déconnexion des clients et la connexion de nouveau clients
    []Synchronisation des threads des clients terminés
    []Ajout d’une commande permettant de lister les fonctionnalités disponibles pour le client, stockées dans un fichier texte ( manuel ).
